<html>  
<head>
  <meta charset=utf-8 />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!--
    Note that Google Sign In does not work from a file URL. You will need to make
    this page available from a web server, either from localhost or using Firebase
    Hosting.
    Whichever domain it is running on, you'll have to add the origin for that domain
    in the Google Developer Console: https://console.developers.google.com, search
    for Credentials and create a new credential > OAuth client ID > web application,
    and set the domain as an authorised origin (e.g. http://localhost:8000 or https://foo.bar).
    -->
  <!-- [START google_config] -->
  <!-- **********************************************
       * TODO(DEVELOPER): Use your Client ID below. *
       ********************************************** -->
  <meta name="google-signin-client_id" content="122389199276-bp9vghpqup1c41psc28td79tpb59io1b.apps.googleusercontent.com">
	<!-- Secret IV0YJsIh0Fbiz1crWFZ1HPaR -->
  <meta name="google-signin-cookiepolicy" content="single_host_origin">
  <meta name="google-signin-scope" content="https://www.googleapis.com/auth/yt-analytics.readonly https://www.googleapis.com/auth/youtube.readonly">
  <!-- [END google_config] -->
  <title>Google Sign In Example</title>

  <!-- Material Design Theming -->
  <link rel="stylesheet" href="https://code.getmdl.io/1.1.3/material.orange-indigo.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <script defer src="https://code.getmdl.io/1.1.3/material.min.js"></script>
	<script src="configV.js"></script>
	<link rel="stylesheet" href="main.css"> 

  <!-- Google Sign In -->
  <script sync defer
					src="https://apis.google.com/js/platform.js"
		 			onload="this.onload=function(){};handleClientLoad()" 
        	onreadystatechange="if (this.readyState === 'complete') this.onload()">
	</script>

  <!-- Import and configure the Firebase SDK -->
  <!-- These scripts are made available when the app is served or deployed on Firebase Hosting -->
  <!-- If you do not serve/host your project using Firebase Hosting see https://firebase.google.com/docs/web/setup -->

<script src="https://www.gstatic.com/firebasejs/4.1.3/firebase.js"></script>
<script>
  // Initialize Firebase
	var googleAuth
  var channelID
	var config = {
    apiKey: "AIzaSyCHKCMPwLkFpQDXwD997u1Fv6cCXBqbt90",
    authDomain: "youtube-scanner-yt.firebaseapp.com",
    databaseURL: "https://youtube-scanner-yt.firebaseio.com",
    projectId: "youtube-scanner-yt",
    storageBucket: "youtube-scanner-yt.appspot.com",
    messagingSenderId: "122389199276"
  };
  firebase.initializeApp(config);
</script>

  <script type="text/javascript">
    // [START googlecallback]
  var googleAuth
	var channelId
    function handleClientLoad() {
      gapi.load('client:auth2', initClient);  
    }      

  function loadAPIClientInterfaces() {
    gapi.client.load('youtube', 'v3', function() {
      gapi.client.load('youtubeAnalytics', 'v1', function() {
        // After both client interfaces load, use the Data API to request
        // information about the authenticated user's channel.
        getUserChannel();
      });
    });
  }
	loadAPIClientInterface()
// Call the Data API to retrieve information about the currently
  // authenticated user's YouTube channel.
  function getUserChannel() {
    // Also see: https://developers.google.com/youtube/v3/docs/channels/list
    var request = gapi.client.youtube.channels.list({
      // Setting the "mine" request parameter's value to "true" indicates that
      // you want to retrieve the currently authenticated user's channel.
      mine: true,
      part: 'id,contentDetails'
    });

    request.execute(function(response) {
      if ('error' in response) {
        displayMessage(response.error.message);
      } else {
        // We need the channel's channel ID to make calls to the Analytics API.
        // The channel ID value has the form "UCdLFeWKpkLhkguiMZUp8lWA".
        channelId = response.items[0].id;
      }
    });
  }

  function displayVideoAnalytics(videoId) {
    if (channelId) {
      // To use a different date range, modify the ONE_MONTH_IN_MILLISECONDS
      // variable to a different millisecond delta as desired.
      var today = new Date();
      var lastMonth = new Date(today.getTime() - ONE_MONTH_IN_MILLISECONDS);

      var request = gapi.client.youtubeAnalytics.reports.query({
        // The start-date and end-date parameters must be YYYY-MM-DD strings.
        'start-date': formatDateString(lastMonth),
        'end-date': formatDateString(today),
        // At this time, you need to explicitly specify channel==channelId.
        // See https://developers.google.com/youtube/analytics/v1/#ids
        ids: 'channel==' + channelId,
        dimensions: 'day',
        sort: 'day',
        // See https://developers.google.com/youtube/analytics/v1/available_reports
        // for details about the different filters and metrics you can request
        // if the "dimensions" parameter value is "day".
        metrics: 'views',
        filters: 'video==' + videoId
      });

      request.execute(function(response) {
        // This function is called regardless of whether the request succeeds.
        // The response contains YouTube Analytics data or an error message.
        if ('error' in response) {
          displayMessage(response.error.message);
        } else {
          console.log(response);
        }
      });
    } else {
      // The currently authenticated user's channel ID is not available.
      console.log('The YouTube channel ID for the current user is not available.');
    }
  }


  function onSignIn(googleUser) {
      console.log('Google Auth Response', googleUser);
      // We need to register an Observer on Firebase Auth to make sure auth is initialized.
      var unsubscribe = firebase.auth().onAuthStateChanged(function(firebaseUser) {
        unsubscribe();
        // Check if we are already signed-in Firebase with the correct user.
        if (!isUserEqual(googleUser, firebaseUser)) {
          // Build Firebase credential with the Google ID token.
          // [START googlecredential]
          var credential = firebase.auth.GoogleAuthProvider.credential(
              googleUser.getAuthResponse().id_token);
          // [END googlecredential]
          // Sign in with credential from the Google user.
          // [START authwithcred]
          firebase.auth().signInWithCredential(credential).catch(function(error) {
            // Handle Errors here.
            var errorCode = error.code;
            var errorMessage = error.message;
            // The email of the user's account used.
            var email = error.email;
            // The firebase.auth.AuthCredential type that was used.
            var credential = error.credential;
            // [START_EXCLUDE]
            if (errorCode === 'auth/account-exists-with-different-credential') {
              alert('You have already signed up with a different auth provider for that email.');
              // If you are using multiple auth providers on your app you should handle linking
              // the user's accounts here.
            } else {
              console.error(error);
            }
            // [END_EXCLUDE]
          });
          // [END authwithcred]
        } else {
          console.log('User already signed-in Firebase.');
        }
      });
    }
      function initClient() {
        gapi.client.init({
         'apiKey': configV.google.api_key,
         'clientId':configV.google.client_id,
         'scope': ['https://www.googleapis.com/auth/yt-analytics.readonly', 'https://www.googleapis.com/auth/youtube.readonly'] ,
         'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/youtubeAnalytics/v1/rest']
        }).then(function () {
          googleAuth = gapi.auth2.getAuthInstance();
          // Listen for sign-in state changes.
          googleAuth.isSignedIn.listen(updateSigninStatus);
          // Handle initial sign-in state. (Determine if user is already signed in.)
          var user = googleAuth.currentUser.get();
          setSigninStatus();
          // Call handleAuthClick function when user clicks on
          //      "Sign In/Authorize" button.
        });
       }      

         
  // [END googlecallback]
    /**
     * Check that the given Google user is equals to the given Firebase user.
     */
    // [START checksameuser]
    function isUserEqual(googleUser, firebaseUser) {
      if (firebaseUser) {
        var providerData = firebaseUser.providerData;
        for (var i = 0; i < providerData.length; i++) {
          if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID &&
              providerData[i].uid === googleUser.getBasicProfile().getId()) {
            // We don't need to reauth the Firebase connection.
            return true;
          }
        }
      }
      return false;
    }
    // [END checksameuser]
    /**
     * Handle the sign out button press.
     */
    function handleSignOut() {
      var googleAuth = gapi.auth2.getAuthInstance();
      googleAuth.signOut().then(function() {
        firebase.auth().signOut();
      });
    }
    /**
     * initApp handles setting up UI event listeners and registering Firebase auth listeners:
     *  - firebase.auth().onAuthStateChanged: This listener is called when the user is signed in or
     *    out, and that is where we update the UI.
     */
    function initApp() {
      // Auth state changes.
      // [START authstatelistener]
      firebase.auth().onAuthStateChanged(function(user){
        if (user) {
          // User is signed in.
          var displayName = user.displayName;
          var email = user.email;
          var emailVerified = user.emailVerified;
          var photoURL = user.photoURL;
          var isAnonymous = user.isAnonymous;
          var uid = user.uid;
          var providerData = user.providerData;
          // [START_EXCLUDE]
/*
          document.getElementById('quickstart-sign-in-status').textContent = 'Signed in';
          document.getElementById('signout').disabled = false;
          document.getElementById('quickstart-account-details').textContent = JSON.stringify(user, null, '  ');
*/        
          // [END_EXCLUDE]
        } else {
          // User is signed out.
          // [START_EXCLUDE]
//          document.getElementById('quickstart-sign-in-status').textContent = 'Signed out';
          document.getElementById('signout').disabled = false;
//          document.getElementById('quickstart-account-details').textContent = 'null';
            // [END_EXCLUDE]
        }
      });
      // [END authstatelistener]
      document.getElementById('signout').addEventListener('click', handleSignOut, false);
    }
    window.onload = function() {
      initApp();
    };
  </script>
  </script>
</head>
	<body>
    {{{body}}}
	</body>
</html>  
